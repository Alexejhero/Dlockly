<!DOCTYPE html>
<html>

<head>
  <title>Dlockly | A fully customizable Discord bot with a Scratch-like interface!</title>
  <link rel="shortcut icon" href="https://cdn.glitch.com/43f72134-88ea-4e7b-ace8-4a444b9aab78%2FIcon1.ico?v=1561534699612">
  <link rel="icon" href="https://cdn.glitch.com/43f72134-88ea-4e7b-ace8-4a444b9aab78%2FIcon1.ico?v=1561534699612">

  <script src="https://dlockly-storage.glitch.me/blockly/blockly_compressed.js"></script>
  <script src="https://dlockly-storage.glitch.me/blockly/blocks_compressed.js"></script>
  <script src="https://dlockly-storage.glitch.me/blockly/javascript_compressed.js"></script>
  <script src="https://dlockly-storage.glitch.me/blockly/msg/js/en.js"></script>
  <script src="src/util.js"></script>
  <script src="src/restrictions.js"></script>
  <script src="src/cookies.js"></script>

  <link href="css/main.css" rel="stylesheet">
</head>

<body>
  <table>
    <tbody>
      <tr><td>
        <button onclick="saveConfig()">Save Configuration</button>
      </td></tr>
      <tr>
        <td id="blocklyArea">
        </td>
      </tr>
    </tbody>
  </table>
  <div id="blocklyDiv" style="position:absolute"></div>

  <xml id="toolbox" style="display: none">
    <category name="Logic" colour="210">
      <block type="controls_if"></block>
      <block type="logic_compare"></block>
      <block type="logic_operation"></block>
      <block type="logic_negate"></block>
      <block type="logic_boolean"></block>
      <block type="logic_null"></block>
      <block type="logic_ternary"></block>
    </category>
    <category name="Loops" colour="120">
      <block type="controls_repeat_ext">
        <value name="TIMES">
          <shadow type="math_number">
            <field name="NUM">10</field>
          </shadow>
        </value>
      </block>
      <block type="controls_whileUntil"></block>
      <block type="controls_for">
        <value name="FROM">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
        <value name="TO">
          <shadow type="math_number">
            <field name="NUM">10</field>
          </shadow>
        </value>
        <value name="BY">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
      </block>
      <block type="controls_forEach"></block>
      <block type="controls_flow_statements"></block>
    </category>
    <category name="Math" colour="230">
      <block type="math_number"></block>
      <block type="math_arithmetic">
        <value name="A">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
        <value name="B">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
      </block>
      <block type="math_single">
        <value name="NUM">
          <shadow type="math_number">
            <field name="NUM">9</field>
          </shadow>
        </value>
      </block>
      <block type="math_trig">
        <value name="NUM">
          <shadow type="math_number">
            <field name="NUM">45</field>
          </shadow>
        </value>
      </block>
      <block type="math_constant"></block>
      <block type="math_number_property">
        <value name="NUMBER_TO_CHECK">
          <shadow type="math_number">
            <field name="NUM">0</field>
          </shadow>
        </value>
      </block>
      <block type="math_round">
        <value name="NUM">
          <shadow type="math_number">
            <field name="NUM">3.1</field>
          </shadow>
        </value>
      </block>
      <block type="math_on_list"></block>
      <block type="math_modulo">
        <value name="DIVIDEND">
          <shadow type="math_number">
            <field name="NUM">64</field>
          </shadow>
        </value>
        <value name="DIVISOR">
          <shadow type="math_number">
            <field name="NUM">10</field>
          </shadow>
        </value>
      </block>
      <block type="math_constrain">
        <value name="VALUE">
          <shadow type="math_number">
            <field name="NUM">50</field>
          </shadow>
        </value>
        <value name="LOW">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
        <value name="HIGH">
          <shadow type="math_number">
            <field name="NUM">100</field>
          </shadow>
        </value>
      </block>
      <block type="math_random_int">
        <value name="FROM">
          <shadow type="math_number">
            <field name="NUM">1</field>
          </shadow>
        </value>
        <value name="TO">
          <shadow type="math_number">
            <field name="NUM">100</field>
          </shadow>
        </value>
      </block>
      <block type="math_random_float"></block>
    </category>
    <category name="Text" colour="160">
      <block type="text"></block>
      <block type="text_join"></block>
      <block type="text_append">
        <value name="TEXT">
          <shadow type="text"></shadow>
        </value>
      </block>
      <block type="text_length">
        <value name="VALUE">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
      <block type="text_isEmpty">
        <value name="VALUE">
          <shadow type="text">
            <field name="TEXT"></field>
          </shadow>
        </value>
      </block>
      <block type="text_indexOf">
        <value name="VALUE">
          <block type="variables_get">
            <field name="VAR">text variable</field>
          </block>
        </value>
        <value name="FIND">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
      <block type="text_charAt">
        <value name="VALUE">
          <block type="variables_get">
            <field name="VAR">text variable</field>
          </block>
        </value>
      </block>
      <block type="text_getSubstring">
        <value name="STRING">
          <block type="variables_get">
            <field name="VAR">text variable</field>
          </block>
        </value>
      </block>
      <block type="text_changeCase">
        <value name="TEXT">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
      <block type="text_trim">
        <value name="TEXT">
          <shadow type="text">
            <field name="TEXT">abc</field>
          </shadow>
        </value>
      </block>
    </category>
    <category name="Lists" colour="260">
      <block type="lists_create_with">
        <mutation items="0"></mutation>
      </block>
      <block type="lists_create_with"></block>
      <block type="lists_repeat">
        <value name="NUM">
          <shadow type="math_number">
            <field name="NUM">5</field>
          </shadow>
        </value>
      </block>
      <block type="lists_length"></block>
      <block type="lists_isEmpty"></block>
      <block type="lists_indexOf">
        <value name="VALUE">
          <block type="variables_get">
            <field name="VAR">list variable</field>
          </block>
        </value>
      </block>
      <block type="lists_getIndex">
        <value name="VALUE">
          <block type="variables_get">
            <field name="VAR">list variable</field>
          </block>
        </value>
      </block>
      <block type="lists_setIndex">
        <value name="LIST">
          <block type="variables_get">
            <field name="VAR">list variable</field>
          </block>
        </value>
      </block>
      <block type="lists_getSublist">
        <value name="LIST">
          <block type="variables_get">
            <field name="VAR">list variable</field>
          </block>
        </value>
      </block>
      <block type="lists_split">
        <value name="DELIM">
          <shadow type="text">
            <field name="TEXT">,</field>
          </shadow>
        </value>
      </block>
      <block type="lists_sort"></block>
    </category>
    <category name="Color" colour="20">
      <block type="colour_picker"></block>
      <block type="colour_random"></block>
      <block type="colour_rgb">
        <value name="RED">
          <shadow type="math_number">
            <field name="NUM">100</field>
          </shadow>
        </value>
        <value name="GREEN">
          <shadow type="math_number">
            <field name="NUM">50</field>
          </shadow>
        </value>
        <value name="BLUE">
          <shadow type="math_number">
            <field name="NUM">0</field>
          </shadow>
        </value>
      </block>
      <block type="colour_blend">
        <value name="COLOUR1">
          <shadow type="colour_picker">
            <field name="COLOUR">#ff0000</field>
          </shadow>
        </value>
        <value name="COLOUR2">
          <shadow type="colour_picker">
            <field name="COLOUR">#3333ff</field>
          </shadow>
        </value>
        <value name="RATIO">
          <shadow type="math_number">
            <field name="NUM">0.5</field>
          </shadow>
        </value>
      </block>
    </category>
    <sep></sep>
    <category name="Variables" colour="330" custom="VARIABLE"></category>
    <category name="Functions" colour="290" custom="PROCEDURE"></category>
    <sep></sep>
    <%- xmlCategoryTree %>
  </xml>

  <script>
    document.getElementById("blocklyDiv").style.height = window.innerHeight - 20 + "px";
    document.getElementById("blocklyDiv").style.width = window.innerWidth - 20 + "px";

    <% blocks.forEach(v => { %>
      Blockly.Blocks["<%= v.type %>"] = { 
        init: function () {
          <% if (v.init) { %>
            eval(decode("<%= v.init %>"));
          <% } else { %>
            this.jsonInit(JSON.parse(decode('<%= JSON.stringify(v) %>')));
          <% } %>
        },
        <% if (v.mutationToDom) { %>
          mutationToDom: function() {
            var _return;
            eval(decode("<%= v.mutationToDom %>"));
            return _return;
          },
        <% } %>
        <% if (v.domToMutation) { %>
          domToMutation: function(container) {
            eval(decode("<%= v.domToMutation %>"));
          },
        <% } %>
        <% if (v.decompose) { %>
          decompose: function(workspace) {
            var _return;
            eval(decode("<%= v.decompose %>"));
            return _return;
          },
        <% } %>
        <% if (v.compose) { %>
          compose: function(topBlock) {
            eval(decode("<%= v.compose %>"));
          },
        <% } %>
        <% if (v.updateShape) { %>
          updateShape_: function() {
            eval(decode("<%= v.updateShape %>"));
          },
        <% } %>
      };
    <% }); %>

    <% generators.forEach(g => { %>
      Blockly.JavaScript['<%= g.type %>'] = function(block) {
        var _return;
        eval(decode("<%= g.generator %>"));
        return _return;
      }
    <% }); %>

    var blocklyArea = document.getElementById('blocklyArea');
    var blocklyDiv = document.getElementById('blocklyDiv');
    var workspace = Blockly.inject(blocklyDiv, {
      maxInstances: JSON.parse(decode('<%= max %>')),
      collapse: false,
      comments: false,
      grid: {
        spacing: 20,
        length: 1,
        color: '#888'
      },
      scrollbars: false,
      disable: false,
      toolbox: document.getElementById('toolbox'),
    });
    document.workspace = workspace;
    var onresize = function(e) {
      console.log("Resize!");
      var element = blocklyArea;
      var x = 0;
      var y = 0;
      do {
        x += element.offsetLeft;
        y += element.offsetTop;
        element = element.offsetParent;
      } while (element);
      blocklyDiv.style.left = x + 'px';
      blocklyDiv.style.top = y + 'px';
      blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';
      blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';
      Blockly.svgResize(workspace);
    };
    window.addEventListener('resize', onresize, false);
    onresize();
    Blockly.svgResize(workspace);

    document.restrictions = JSON.parse(decode('<%= restrictions %>'));

    workspace.addChangeListener(Blockly.Events.disableOrphans);

    setInterval(() => { disableUnapplicable({ type: Blockly.Events.MOVE, workspaceId: workspace.id, }); }, 100);

    if (decode('<%= blocklyXml %>').length > 0) Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(decode("<%= blocklyXml %>")), workspace);

    function saveConfig() {
      var code = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));
      window.location = "/save?guild=" + getUrlParameter('guild') + "&xml=" + encodeURIComponent(code) + "&js=" + encodeURIComponent(Blockly.JavaScript.workspaceToCode());
    }

    function getUrlParameter(name) {
      name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
      var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
      var results = regex.exec(location.search);
      return results ? decodeURIComponent(results[1].replace(/\+/g, ' ')) : '';
    }
  </script>
</body>

</html>