<!DOCTYPE html>
<html>

<head>
  <title>Dlockly | A fully customizable Discord bot with a Scratch-like interface!</title>
  <link rel="shortcut icon" href="https://cdn.glitch.com/43f72134-88ea-4e7b-ace8-4a444b9aab78%2FIcon1.ico?v=1561534699612">
  <link rel="icon" href="https://cdn.glitch.com/43f72134-88ea-4e7b-ace8-4a444b9aab78%2FIcon1.ico?v=1561534699612">

  <script src="https://dlockly-storage.glitch.me/blockly/blockly_compressed.js"></script>
  <script src="https://dlockly-storage.glitch.me/blockly/blocks_compressed.js"></script>
  <script src="https://dlockly-storage.glitch.me/blockly/javascript_compressed.js"></script>
  <script src="https://dlockly-storage.glitch.me/blockly/msg/js/en.js"></script>
  <script src="www/js/util.js"></script>
  <script src="www/js/restrictions.js"></script>
  <script src="www/js/cookies.js"></script>

  <link href="www/css/main.css" rel="stylesheet">
</head>

<body>
  <table>
    <tbody>
      <tr><td>
        <form action="/save" method="post" onsubmit="saveConfig()">
          <input type="hidden" name="guild" id="inputGuild" required>
          <input type="hidden" name="xml" id="inputXml" required>
          <input type="submit" id="save" style="font-size:20px;height:37px" value="Save Configuration">
          <button type="button" id="reset" onclick="resetConfig()" style="font-size:20px;height:37px">Reset Changes</button>
          <button type="button" id="example" onclick="loadExample()" style="font-size:20px;height:37px; float:right;">Load Example</button>
        </form>
      </td></tr>
      <tr>
        <td id="blocklyArea">
        </td>
      </tr>
    </tbody>
  </table>

  <div id="blocklyDiv" style="position:absolute"></div>

  <xml id="toolbox" style="display: none">
    <%- xmlCategoryTree %>
  </xml>

  <script>
    document.getElementById("blocklyDiv").style.height = window.innerHeight - 20 + "px";
    document.getElementById("blocklyDiv").style.width = window.innerWidth - 20 + "px";

    <% for (var v of blocks) { %>
      <% if (v.default) continue; %>
      Blockly.Blocks["<%= v.type %>"] = { 
        init: function () {
          <% if (v.init) { %>
            eval(decode("<%= v.init %>"));
          <% } else { %>
            this.jsonInit(JSON.parse(decode('<%= JSON.stringify(v) %>')));
          <% } %>
        },
        <% if (v.mutationToDom) { %>
          mutationToDom: function() {
            var _return;
            eval(decode("<%= v.mutationToDom %>"));
            return _return;
          },
        <% } %>
        <% if (v.domToMutation) { %>
          domToMutation: function(container) {
            eval(decode("<%= v.domToMutation %>"));
          },
        <% } %>
        <% if (v.decompose) { %>
          decompose: function(workspace) {
            var _return;
            eval(decode("<%= v.decompose %>"));
            return _return;
          },
        <% } %>
        <% if (v.compose) { %>
          compose: function(topBlock) {
            eval(decode("<%= v.compose %>"));
          },
        <% } %>
        <% if (v.updateShape) { %>
          updateShape_: function() {
            eval(decode("<%= v.updateShape %>"));
          },
        <% } %>
      };
    <% } %>

    <% generators.forEach(g => { %>
      Blockly.JavaScript['<%= g.type %>'] = function(block) {
        var _return;
        eval(decode("<%= g.generator %>"));
        return _return;
      }
    <% }); %>

    var blocklyArea = document.getElementById('blocklyArea');
    var blocklyDiv = document.getElementById('blocklyDiv');
    var workspace = Blockly.inject(blocklyDiv, {
      maxInstances: JSON.parse(decode('<%= max %>')),
      collapse: false,
      comments: false,
      grid: {
        spacing: 20,
        length: 1,
        color: '#888'
      },
      disable: false,
      scrollbars: true,
      toolbox: document.getElementById('toolbox'),
    });
    document.workspace = workspace;
    var onresize = function(e) {
      var element = blocklyArea;
      var x = 0;
      var y = 0;
      do {
        x += element.offsetLeft;
        y += element.offsetTop;
        element = element.offsetParent;
      } while (element);
      blocklyDiv.style.left = x + 'px';
      blocklyDiv.style.top = y + 'px';
      blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';
      blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';
      Blockly.svgResize(workspace);
    };
    window.addEventListener('resize', onresize, false);
    onresize();
    Blockly.svgResize(workspace);

    document.restrictions = JSON.parse(decode('<%= restrictions %>'));

    //workspace.addChangeListener(Blockly.Events.disableOrphans);

    if (decode('<%= blocklyXml %>').length > 0) Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(decode("<%= blocklyXml %>")), workspace);

    setInterval(() => { 
      disableUnapplicable({ 
        type: Blockly.Events.MOVE, 
        workspaceId: workspace.id, 
      });

      var saveNeedsDisabling = false;
      if (decode("<%= blocklyXml %>") == Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace))) {
        document.getElementById("save").setAttribute("title", "You haven't made any changes!");
        document.getElementById("save").setAttribute("disabled", "true");
        document.getElementById("reset").setAttribute("title", "You haven't made any changes!");
        document.getElementById("reset").setAttribute("disabled", "true");
        saveNeedsDisabling = true;
      }
      for (var block of workspace.getAllBlocks(false)) {
        if (block.warning && !block.disabled) {
          document.getElementById("save").setAttribute("title", "Cannot save if there are errors!");
          document.getElementById("save").setAttribute("disabled", "true");
          return;
        }
      }
      if (!saveNeedsDisabling) {
        document.getElementById("save").removeAttribute("title");
        document.getElementById("save").removeAttribute("disabled");        
        document.getElementById("reset").removeAttribute("title");
        document.getElementById("reset").removeAttribute("disabled");
      }

      if (decode("<%= exampleXml %>") == Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace))) {
        document.getElementById("example").setAttribute("title", "The example is already loaded!");
        document.getElementById("example").setAttribute("disabled", "true");
      } else {
        document.getElementById("example").removeAttribute("title");
        document.getElementById("example").removeAttribute("disabled");
      }
    }, 100);

    function saveConfig() {
      var code = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));
      document.getElementById("inputGuild").setAttribute("value", getUrlParameter("guild"));
      document.getElementById("inputXml").setAttribute("value", encodeURIComponent(code));
      window.onbeforeunload = null;
    }

    function getUrlParameter(name) {
      name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
      var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
      var results = regex.exec(location.search);
      return results ? decodeURIComponent(results[1].replace(/\+/g, ' ')) : '';
    }

    function resetConfig() {
      window.onbeforeunload = null;
      window.location.reload(false);
    }

    function loadExample() {
      document.workspace.clear();
      Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(decode("<%= exampleXml %>")), workspace);
    }
  </script>
</body>

</html>